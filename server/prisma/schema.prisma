// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int       @id @unique @default(autoincrement())
  email          String?   @unique
  password       String?
  fullName       String?
  phoneNumber    String?
  gender         String?
  role           Role      @default(STAFF)
  dob            DateTime? @db.Date
  address        String?
  identityNumber String?
  image          String?
}

model Guess {
  id                  Int     @id @default(autoincrement())
  fullName            String?
  email               String?
  phoneNumber         String?
  address             String?
  identityNumber      String?
  insuranceCardNumber String?
  image               String?
  order               Order?  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId             Int?
}

model Tour {
  id              Int           @id @default(autoincrement())
  isPublic        Boolean       @default(true)
  isSold          Boolean       @default(true)
  name            String
  departure       String
  departureTime   DateTime
  price           Float
  desc            String        @db.LongText
  maxPeople       Int
  sold            Int           @default(0)
  flight          String
  plan            Plan?         @relation(fields: [planId], references: [id], onDelete: Cascade)
  planId          Int?
  planText        Json?
  listServices    Json?
  star            Float         @default(0)
  numberOfReviews Int           @default(0)
  status          Int           @default(0) //0: notYetDeparted _ 1: departed _ 2: finished
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  services        TourService[]
  orders          Order[]
  reviews         Review[]
}

model Plan {
  id            Int         @id @default(autoincrement())
  name          String
  destination   Destination @relation(fields: [destinationId], references: [id], onDelete: Cascade)
  destinationId Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  dayplans      DayPlan[]
  tours         Tour[]
}

model DayPlan {
  id        Int      @id @default(autoincrement())
  day       Int
  title     String
  desc      String   @db.LongText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  plan      Plan     @relation(fields: [planId], references: [id], onDelete: Cascade)
  planId    Int
}

model Order {
  id                  Int      @id @unique @default(autoincrement())
  isCompanyTour       Boolean  @default(false)
  note                String?  @db.LongText
  quantity            Int?
  totalPrice          Float?
  isDeposited         Boolean  @default(false)
  hasDeparted         Int?
  tour                Tour?    @relation(fields: [tourId], references: [id], onDelete: Cascade)
  tourId              Int?
  invoice             Invoice?
  isReviewed          Boolean  @default(false)
  guessInfos          Guess[]
  teamLeadName        String?
  teamLeadPhoneNumber String?
  teamLeadEmail       String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model Invoice {
  id          Int      @id @default(autoincrement())
  depositedAt DateTime @default(now())
  paidAt      DateTime @updatedAt
  isPaid      Boolean  @default(false)
  order       Order?   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId     Int?     @unique
}

model Destination {
  id        Int      @id @default(autoincrement())
  name      String?  @unique
  address   String?
  desc      String?  @db.LongText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  plans     Plan[]
  images    Image[]
}

model Image {
  id            Int          @id @default(autoincrement())
  url           String?
  destination   Destination? @relation(fields: [destinationID], references: [id], onDelete: Cascade)
  destinationID Int?
}

model Service {
  id    Int           @id @default(autoincrement())
  name  String?       @unique
  tours TourService[]
}

model TourService {
  tour      Tour    @relation(fields: [tourId], references: [id], onDelete: Cascade)
  tourId    Int
  service   Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId Int

  @@id([tourId, serviceId])
}

model Review {
  id        Int      @id @default(autoincrement())
  email     String?
  name      String?
  star      Int?
  comment   String?  @db.LongText
  tour      Tour?    @relation(fields: [tourId], references: [id], onDelete: Cascade)
  tourId    Int?
  createdAt DateTime @default(now())
}

model Policy {
  id      Int     @id @default(autoincrement())
  content String? @db.LongText
}

enum Role {
  STAFF
  MANAGER
  DRIVER
  TOUR_GUIDE
}
